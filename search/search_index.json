{"config":{"lang":["en","de"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Open Code List Representation (OpenCoLi) is a standardised JSON format for the generic representation of code lists.</p> <p>The main features are:</p> <ul> <li>Definition of code lists and code list collections using JSON</li> <li>Support for versioning</li> <li>Support for multilingual strings</li> <li>Support for internal references</li> <li>Support for references to external code lists</li> <li>Support for multi-column keys and references</li> <li>OpenCoLi documents can be validated against the OpenCoLi Document Schema</li> <li>Open Source</li> </ul>"},{"location":"#examples","title":"Examples","text":"<p>The following OpenCoLi example documents are available:</p> <ul> <li>ISO 3166-2 Codes for Germany</li> <li>Capitals of the German federal states</li> </ul>"},{"location":"#current-status","title":"Current Status","text":"<p>OpenCoLi is still very new and is being released here in its very first version. We would greatly appreciate any feedback.</p>"},{"location":"change-log/","title":"Change Log","text":""},{"location":"change-log/#opencoli-specification","title":"OpenCoLi specification","text":""},{"location":"change-log/#012-_-august-09-2024","title":"0.1.2 _ August 09, 2024","text":"<ul> <li>First publication</li> </ul>"},{"location":"community/","title":"Community","text":"<p>OpenCoLi is an open-source project. The current version is an initial proposal. We welcome feedback of any kind, whether positive or negative:</p> <ul> <li>Create a question or report in the GitHub Issue Tracker.</li> <li>Start a discussion in GitHub Discussions.</li> <li>Initiate a Pull Request.</li> </ul>"},{"location":"specification/","title":"OpenCoLi Specification","text":""},{"location":"specification/#version-012","title":"Version 0.1.2","text":"<p>The key words \"MUST\", \"REQUIRED\", \"SHOULD\", and \"MAY\" in this document are to be interpreted as described in RFC2119 and RFC8174, when, and only when, they appear in all capitals, as shown here.</p> <p>This specification is licensed under the Apache License, Version 2.0.</p>"},{"location":"specification/#introduction","title":"Introduction","text":"<p>The Open Code List Representation Format (OpenCoLi) defines a generic standard data format for representing code lists. Based on the JSON Standard, this format can be easily generated and read by almost any programming language. Documents in the OpenCoLi format can be validated for syntactic correctness using the OpenCoLi Document Schema.</p> <p>OpenCoLi can be used for exchanging code lists between services or applications, as a representation format for official code lists, or as a response format for API requests (e.g., for RESTful web services).</p>"},{"location":"specification/#what-are-code-lists","title":"What are Code Lists?","text":"<p>Code lists are structured collections of codes or keys used for the identification and classification of data. These code lists are essential in numerous fields such as databases, management systems, scientific research, and industrial applications. They help in organising, storing, and retrieving data consistently and efficiently.</p> <p>Code lists play a crucial role in the standardisation and harmonisation of data. By using standardised codes, different systems and organisations can interpret and exchange data uniformly.</p> <p>Examples of code lists include:</p> <ul> <li> <p>International codes for countries, languages, and currencies by the International Organization for Standardization (ISO).</p> </li> <li> <p>National area codes (e.g., municipal codes of the Federal Republic of Germany).</p> </li> <li> <p>National and subnational codes in the public sector (e.g., statistical codes from statistical authorities).</p> </li> </ul> <p>In principle, any data selection can be mapped to a code list; even a simple Boolean value can be represented by the codes No and Yes.</p>"},{"location":"specification/#how-are-code-lists-structured","title":"How are Code Lists structured?","text":"<p>The simplest form of a code list consists of two columns: key and description.</p> <p>Here is an example of a country code list:</p> Code Description AT Austria CH Switzerland DE Germany <p>Code lists can potentially contain an unlimited number of columns. Here is an example of a country code list with three columns:</p> Code Short Name Long Name AT Austria Republic of Austria CH Switzerland Swiss Confederation DE Germany Federal Republic of Germany <p>Code lists can refer to each other. Here is an example of a country code list referring to another continents code list:</p> Code Short Name Long Name Continent AT Austria Republic of Austria EU CH Switzerland Swiss Confederation EU DE Germany Federal Republic of Germany EU MA Morocco Kingdom of Morocco AF <p>The corresponding continents code list might look like this:</p> Code Name AF Africa AM Americas EU Europe OC Oceania <p>Code lists can also have more than one key. Here is an example of a country code list with different ISO3166 codes:</p> Alpha2Code Alpha3Code NumericCode Name AT AUT 040 Austria CH CHE 756 Switzerland DE DEU 276 Germany <p>Let\u2019s go a step further with this multilingual country code list:</p> Code Language Name AT en Austria AT de \u00d6sterreich CH en Switzerland CH de Schweiz DE en Germany DE de Deutschland <p>Here, it is the combination of key and language (also represented by a language key) that defines uniqueness.</p> <p>The structure of code lists can thus be simple or somewhat complex.</p>"},{"location":"specification/#are-there-already-standards-for-code-lists","title":"Are There Already Standards for Code Lists?","text":"<p>Yes, there are: The Organization for the Advancement of Structured Information Standards (OASIS) has defined an XML-based standard for code lists with Code List Representation (genericode).</p> <p>The OASIS Code List Representation format, \u201cgenericode\u201d, is a single model and XML format (with a W3C XML Schema) that can encode a broad range of code list information. The XML format is designed to support interchange or distribution of machine-readable code list information between systems.  Note that genericode is not designed as a run-time format for accessing code list information, and is not optimized for such usage.  Rather, it is designed as an interchange format that can be transformed into formats suitable for run-time usage, or loaded into systems that perform run-time processing using code list information.</p> <p>This sounds good, but there\u2019s a catch. There is no JSON representation of \"genericode\".</p> <p>Recognising the custom use of JSON in a tight binding between user-defined processes, the committee sees no purpose served by standardising a JSON syntax for the genericode vocabulary.</p> <p>This means there is no official support for JSON as a data format and thus no official JSON schema.</p> <p>So, if you want to represent code lists in XML format, the OASIS standard is recommended. However, if you want to work with JSON, OpenCoLi provides a suitable alternative. OpenCoLi is significantly influenced by the OASIS Code List Representation Format and strives to be largely compatible with it.</p>"},{"location":"specification/#definitions","title":"Definitions","text":""},{"location":"specification/#opencoli-document","title":"OpenCoLi Document","text":"<p>An OpenCoLi document is a self-contained resource that defines and describes either a code list or a collection of code lists. It MUST contain at least the <code>opencoli</code> field and either <code>codeList</code> or <code>codeListSet</code>, but not both. An OpenCoLi document uses and conforms to the OpenCoLi specification.</p>"},{"location":"specification/#code-list","title":"Code List","text":"<p>A code list is a classic relational table with columns and data rows, where at least one column should serve as the key (code). OpenCoLi allows for defining generic code lists.</p>"},{"location":"specification/#code-list-collection","title":"Code List Collection","text":"<p>A code list collection is a list of references to external code lists. A code list collection can be used to group different versions of a code list.</p>"},{"location":"specification/#specification","title":"Specification","text":""},{"location":"specification/#versioning","title":"Versioning","text":"<p>The OpenCoLi specification is versioned according to the <code>major.minor.patch</code> scheme. The major-minor part of the version number (e.g., <code>0.1</code>) MUST indicate the functional set of the specification. Patch versions address errors in this document or provide clarifications to this document, not to the functionality. Tools that support OpenCoLi version <code>0.1</code> MUST be compatible with all <code>0.1.*</code> versions of OpenCoLi. The patch version SHOULD NOT be considered by the tools, so that no distinction is made between <code>0.1.0</code> and <code>0.1.1</code>.</p> <p>An OpenCoLi document always contains a mandatory <code>opencoli</code> field that specifies the version of the OpenCoLi specification being used.</p>"},{"location":"specification/#format","title":"Format","text":"<p>An OpenCoLi document that conforms to the OpenCoLi specification is itself a JSON object that can be represented in JSON format.</p> <p>All field names in the specification are case-sensitive. The schema defines two types of fields: fixed fields that have a declared name, and free fields whose names MUST conform to a specific pattern. Additional fields MUST have unique names within the contained JSON object.</p>"},{"location":"specification/#json-schema","title":"JSON Schema","text":"<p>JSON Schema is a specification for defining JSON data structures. A JSON schema itself is expressed declaratively using JSON. The OpenCoLi Document Schema is a JSON schema for OpenCoLi documents.</p>"},{"location":"specification/#multilingual-support","title":"Multilingual Support","text":"<p>OpenCoLi supports multilingualism, meaning text strings can optionally be provided with one or more IETF BCP 47 language tags. Each language tag can then be followed by the corresponding translation.</p> <p>Example:</p> <pre><code>\"description\": [\n  {\n    \"language\": \"en\",\n    \"text\": \"Currency codes of the International Standard ISO 4217\"\n  },\n  {\n    \"language\": \"de\",\n    \"text\": \"W\u00e4hrungscodes der internationalen Norm ISO 4217\"\n  }\n]\n</code></pre>"},{"location":"specification/#language-tags","title":"Language Tags","text":"<p>IETF BCP 47 (Best Current Practice 47) is a document that defines the rules and procedures for creating and using language tags. These tags are used to identify the language of content on the Internet. BCP 47 is maintained by the Internet Engineering Task Force (IETF) and consists of two RFCs (Request for Comments): RFC 5646 and RFC 4647.</p> <p>Language tags are necessary to ensure proper localisation and internationalisation of web content and software. They allow applications and services to provide the correct language content to users and support the accurate display of language-specific data such as date formats, numbers, and text direction.</p> <p>A BCP 47 language tag consists of a series of subtags separated by hyphens. These subtags define various aspects of the language and its variants. The most basic components are:</p> <ul> <li> <p>Primary language subtag: This is a mandatory subtag consisting of a two- or three-letter code that denotes the main language (e.g., <code>en</code> for English, <code>de</code> for German).</p> </li> <li> <p>Region subtag: An optional subtag that specifies a country or region (e.g., <code>US</code> for the United States in <code>en-US</code>).</p> </li> <li> <p>Script subtag: An optional subtag that indicates the writing system (e.g., <code>Latn</code> for the Latin alphabet in <code>zh-Latn</code>).</p> </li> <li> <p>Variant subtag: An optional subtag that describes language variants or dialects (e.g., <code>1901</code> for traditional German orthography in <code>de-1901</code>).</p> </li> <li> <p>Extension subtag: Extensions for specifying additional information.</p> </li> <li> <p>Private use subtag: A range reserved for private use and not standardised.</p> </li> </ul>"},{"location":"specification/#dates-and-times","title":"Dates and Times","text":"<p>The formatting of dates and times in OpenCoLi, as specified by JSON Schema, is defined by RFC 3339, Section 5.6.</p> <p>Examples:</p> <ul> <li><code>date-time</code>: Date and time together, e.g., <code>2024-11-13T20:20:39</code> or <code>2024-11-13T20:20:39+00:00</code>.</li> <li><code>time</code>: Time only, e.g., <code>20:20:39</code> or <code>20:20:39+00:00</code>.</li> <li><code>date</code>: Date only, e.g., <code>2024-11-13</code>.</li> </ul>"},{"location":"specification/#uris","title":"URIs","text":"<p>When a Uniform Resource Identifier (URI) is required, it is important to distinguish between two JSON string formats depending on the context:</p> <ul> <li> <p>The <code>uri</code> format expects the JSON string to be an absolute URI. An absolute URI contains all the necessary information to identify the resource independently of its context. This means a <code>uri</code>:</p> <ul> <li>begins with a scheme (like http, https, etc.),</li> <li>may contain a hostname or an IP address,</li> <li>and may optionally include a path, a query, and a fragment.</li> </ul> </li> <li> <p>The <code>uri-reference</code> format is more flexible and allows both absolute and relative URIs. <code>uri-reference</code> can be a complete URI as described above, or it can be a relative reference that needs to be interpreted in a specific context. A relative URI might include only a path or even just a fragment.</p> </li> </ul> <p>Examples:</p> <ul> <li><code>uri</code>:<ul> <li><code>https://example.com/path/to/resource?query=param#fragment</code></li> </ul> </li> <li><code>uri-reference</code>:<ul> <li><code>https://example.com/path/to/resource?query=param#fragment</code></li> <li><code>/path/to/resource</code></li> <li><code>#fragment</code></li> </ul> </li> </ul>"},{"location":"specification/#schema","title":"Schema","text":""},{"location":"specification/#opencoli-object","title":"OpenCoLi Object","text":"<p>This is the root object of an OpenCoLi document and contains the following fields:</p> <code>opencoli</code> <p>A JSON string with the version number of the OpenCoLi specification. This field is REQUIRED.</p> <code>codeList</code> <p>A <code>codeList</code> object that includes the column definitions and data content of a code list.</p> <code>codeListSet</code> <p>A <code>codeListSet</code> object that defines a collection of code lists.</p> <p>The <code>codeList</code> and <code>codeListSet</code> fields are mutually exclusive. One of these fields is REQUIRED.</p>"},{"location":"specification/#codelist-object","title":"codeList Object","text":"<p>The <code>codeList</code> object defines a complete code list along with its data:</p> <code>info</code> <p>A <code>codeListInfo</code> object containing metadata about the code list. This field is REQUIRED.</p> <code>columnSet</code> <p>A <code>columnSet</code> object that defines the columns and unique keys of the code list. This field is REQUIRED.</p> <code>dataSet</code> <p>A <code>dataSet</code> object that contains the data rows of the code list.</p>"},{"location":"specification/#codelistinfo-object","title":"codeListInfo Object","text":"<p>The <code>codeListInfo</code> object contains metadata about the code list:</p> <code>shortName</code> <p>A JSON string with the short name of the code list.</p> <code>longName</code> <p>The long name of the code list. This can be either a regular JSON string or a JSON array of <code>localizableString</code> objects.</p> <code>description</code> <p>A detailed description of the code list. This can be either a regular JSON string or a JSON array of <code>localizableString</code> objects.</p> <code>notes</code> <p>Additional notes about the code list. This can be either a regular JSON string or a JSON array of <code>localizableString</code> objects.</p> <code>changeLog</code> <p>Documents the changes compared to previous versions of this code list. It MUST be a JSON array of JSON strings.</p> <code>agency</code> <p>An <code>agency</code> object with information about the organisation responsible for the publication and/or maintenance of the codes.</p> <code>version</code> <p>A JSON string with the version of the code list.</p> <code>validFrom</code> <p>A JSON string in <code>date-time</code> format that defines the start date from which this code list is valid.</p> <code>validTo</code> <p>A JSON string in <code>date-time</code> format that defines the end date up to which this code list is valid.</p> <code>canonicalUri</code> <p>A JSON string in <code>uri</code> format. This URI uniquely identifies all versions (together) of this code list. This field is REQUIRED.</p> <code>canonicalVersionUri</code> <p>A JSON string in <code>uri</code> format. This URI uniquely identifies a specific version of this code list.</p> <code>locationUri</code> <p>Either a JSON string in <code>uri</code> format or a JSON array with JSON string values in <code>uri</code> format. These URId are suggested retrieval locations for the referenced code list, in OpenCoLi format.</p> <code>publishedAt</code> <p>A JSON string in <code>date-time</code> format with the publication date of this code list.</p> <code>publishedFrom</code> <p>A <code>publisher</code> object with information about the publisher of this code list.</p> <code>language</code> <p>A JSON string with the language of this code list. This MUST be an IETF BCP 47 language tag.</p> <p>This object MAY be extended.</p> <p>Example:</p> <pre><code>\"info\": {\n  \"shortName\": \"GermanFederalStateCodes\",\n  \"longName\": \"ISO 3166-2 Codes for Germany\",\n  \"description\": \"ISO 3166-2 Codes for the federal states of Germany\",\n  \"agency\": {\n    \"shortName\": \"ISO\",\n    \"longName\": \"International Organization for Standardization\",\n    \"url\": \"https://www.iso.org/\"\n  },\n  \"version\": \"2024-07-12\",\n  \"canonicalUri\": \"urn:iso:std:iso:3166-2\",\n  \"canonicalVersionUri\": \"urn:iso:std:iso:3166-2:2024-07-12\",\n  \"locationUri\": \"https://raw.githubusercontent.com/openpotato/opencoli/main/samples/germany.federal-state-codes-2024-07-12.json\",\n  \"publishedAt\": \"2024-07-12T10:00:00\",\n  \"publishedFrom\": {\n    \"shortName\": \"OpenCoLi\",\n    \"url\": \"https://openpotato.github.io/opencoli/\"\n  },\n  \"language\": \"en\"\n}\n</code></pre>"},{"location":"specification/#codelistset-object","title":"codeListSet Object","text":"<p>The <code>codeListSet</code> object defines a collection of code lists:</p> <code>info</code> <p>A <code>codeListSetInfo</code> object containing metadata about the code list collection. This field is REQUIRED.</p> <code>codeLists</code> <p>A list of code lists. It MUST be a JSON array of <code>codeListRef</code> objects. This field is REQUIRED.</p>"},{"location":"specification/#codelistsetinfo-object","title":"codeListSetInfo Object","text":"<p>The <code>codeListSetInfo</code> object contains metadata about a code list collection:</p> <code>shortName</code> <p>A JSON string with the short name of the code list collection.</p> <code>longName</code> <p>The long name of the code list collection. This can be either a regular JSON string or a JSON array of <code>localizableString</code> objects.</p> <code>description</code> <p>A short description of the code list collection. This can be either a regular JSON string or a JSON array of <code>localizableString</code> objects.</p> <code>summary</code> <p>A longer summary of the content of the code list collection. This can be either a regular JSON string or a JSON array of <code>localizableString</code> objects.</p> <code>language</code> <p>A JSON string with the language of this code list collection. This MUST be an IETF BCP 47 language tag.</p> <p>This object MAY be extended.</p> <p>Example:</p> <pre><code>\"info\": {\n  \"shortName\": \"GermanFederalStateCodeListSet\",\n  \"longName\": \"ISO 3166-2 Code Lists for Germany\",\n  \"description\": \"All versions of the ISO 3166-2 Code Lists for the federal states of Germany\",\n  \"language\": \"en\"\n}\n</code></pre>"},{"location":"specification/#codelistref-object","title":"codeListRef Object","text":"<p>The <code>codeListRef</code> object defines a reference to an external code list:</p> <code>canonicalUri</code> <p>A JSON string in <code>uri</code> format. This URI uniquely identifies all versions (together) of the referenced code list. This field is REQUIRED.</p> <code>canonicalVersionUri</code> <p>A JSON string in <code>uri</code> format. This URI uniquely identifies a specific version of the referenced code list.</p> <code>locationUri</code> <p>Either a JSON string in <code>uri</code> format or a JSON array with JSON string values in <code>uri</code> format. These URId are suggested retrieval locations for the referenced code list, in OpenCoLi format.</p>"},{"location":"specification/#columnset-object","title":"columnSet Object","text":"<p>The <code>columnSet</code> object defines columns and unique keys of a code list:</p> <code>columns</code> <p>Defines the columns of the code list. It MUST be a JSON array of <code>column</code> objects. This field is REQUIRED.</p> <code>keys</code> <p>Defines the unique keys of the code list. It MUST be a JSON array of <code>key</code> objects.</p> <code>defaultKey</code> <p>A JSON string with an ID that refers to a <code>key</code> object. This can be used to define the default key, that is, the preferred key from <code>keys</code> to be used as the code source.</p> <code>references</code> <p>Defines internal references as well as external references to other code lists. It MUST be a JSON array of <code>reference</code> objects.</p>"},{"location":"specification/#column-object","title":"column Object","text":"<p>The <code>column</code> object defines a column for a code list:</p> <code>id</code> <p>A JSON string with the ID of the column. This field is REQUIRED.</p> <code>name</code> <p>The name of the column. This can be either a regular JSON string or a JSON array of <code>localizableString</code> objects.</p> <code>description</code> <p>A short description of the column. This can be either a regular JSON string or a JSON array of <code>localizableString</code> objects.</p> <code>type</code> <p>Defines the data type of the column. This field is REQUIRED. It MUST be a JSON string with one of these values: + <code>string</code> + <code>enum</code> + <code>enum-set</code> + <code>integer</code> + <code>number</code> + <code>bool</code> + <code>time</code> + <code>date</code> + <code>date-time</code> + <code>object</code></p> <code>nullable</code> <p>A JSON boolean that defines whether this column can also contain JSON NULLs.</p> <p>Depending on the value in <code>type</code>, further properties are available.</p>"},{"location":"specification/#string","title":"string","text":"<p>Represents a JSON string. The following additional schema properties are available:</p> <ul> <li><code>minLength</code> : A JSON number in <code>integer</code> format with the minimum allowable number of characters</li> <li><code>maxLength</code> : A JSON number in <code>integer</code> format with the maximum allowable number of characters</li> <li><code>pattern</code> : A JSON string with a regular expression that must always match the values in this column.</li> <li><code>language</code> : A JSON string with the language for the contents of this column. This MUST be an IETF BCP 47 language tag.</li> </ul>"},{"location":"specification/#enum","title":"enum","text":"<p>A JSON string representing an enumeration. The following additional schema properties are available:</p> <ul> <li><code>members</code> : Defines the possible values of the enumeration. It MUST be a JSON array of <code>enumMember</code> objects. This field is REQUIRED.</li> </ul>"},{"location":"specification/#enum-set","title":"enum-set","text":"<p>A JSON string representing an enumeration set, formatted as a CSV string. The following additional schema properties are available:</p> <ul> <li><code>delimiterChar</code> : A JSON string defining the CSV delimiter.</li> <li><code>quoteChar</code> : A JSON string defining the CSV quote character.</li> <li><code>members</code> : Defines the possible values of the enumeration. It MUST be a JSON array of <code>enumMember</code> objects. This field is REQUIRED.</li> </ul>"},{"location":"specification/#integer","title":"integer","text":"<p>Represents a JSON number in <code>integer</code> format. The following additional schema properties are available:</p> <ul> <li><code>minValue</code> : A JSON number in <code>integer</code> format with the minimum allowable value</li> <li><code>maxValue</code> : A JSON number in <code>integer</code> format with the maximum allowable value</li> </ul>"},{"location":"specification/#number","title":"number","text":"<p>Represents a JSON number in <code>number</code> format. The following additional schema properties are available:</p> <ul> <li><code>minValue</code> : A JSON number in <code>number</code> format with the minimum allowable value</li> <li><code>maxValue</code> : A JSON number in <code>number</code> format with the maximum allowable value</li> </ul>"},{"location":"specification/#date","title":"date","text":"<p>Represents a JSON string in <code>date</code> format. The following additional schema properties are available:</p> <ul> <li><code>minValue</code> : A JSON string in <code>date</code> format with the minimum allowable value</li> <li><code>maxValue</code> : A JSON string in <code>date</code> format with the minimum allowable value</li> </ul> <p>Here\u2019s the translation into British English:</p>"},{"location":"specification/#date-time","title":"date-time","text":"<p>Represents a JSON string in the <code>date-time</code> format. The following additional schema properties are available:</p> <ul> <li><code>minValue</code>: A JSON string in the <code>date-time</code> format specifying the allowable minimum value.</li> <li><code>maxValue</code>: A JSON string in the <code>date-time</code> format specifying the allowable maximum value.</li> </ul>"},{"location":"specification/#time","title":"time","text":"<p>Represents a JSON string in the <code>time</code> format. The following additional schema properties are available:</p> <ul> <li><code>minValue</code>: A JSON string in the <code>time</code> format specifying the allowable minimum value.</li> <li><code>maxValue</code>: A JSON string in the <code>time</code> format specifying the allowable maximum value.</li> </ul>"},{"location":"specification/#object","title":"object","text":"<p>Represents a JSON object. The following additional schema properties are available:</p> <ul> <li><code>schemaUri</code>: A JSON string in the <code>uri</code> format. This URI is the location for retrieving the JSON schema for this column.</li> </ul>"},{"location":"specification/#enummember-object","title":"enumMember Object","text":"<p>The <code>enumMember</code> object defines a value in an enumeration:</p> <code>value</code> <p>A JSON string with the enumeration value. This field is REQUIRED.</p> <code>description</code> <p>The description of the enumeration value. This can be either a standard JSON string or a JSON array with <code>localizableString</code> objects.</p>"},{"location":"specification/#key-object","title":"key Object","text":"<p>The <code>key</code> object defines a unique key for the code list:</p> <code>id</code> <p>A JSON string with the unique ID of the key. This field is REQUIRED.</p> <code>name</code> <p>The name of the key. This can be either a standard JSON string or a JSON array with <code>localizableString</code> objects.</p> <code>description</code> <p>A brief description of the key. This can be either a standard JSON string or a JSON array with <code>localizableString</code> objects.</p> <code>columnRefs</code> <p>A JSON array of strings with IDs that each reference a <code>column</code> object. This field is REQUIRED.</p>"},{"location":"specification/#reference-object","title":"reference Object","text":"<p>The <code>reference</code> object defines a reference to either an internal or external code list:</p> <code>codeListRef</code> <p>A <code>codeListRef</code> object that points to an external code list. If <code>codeListRef</code> is defined, <code>keyRef</code> refers to a <code>key</code> object from the referenced code list; otherwise, it refers to a <code>key</code> object from this code list.</p> <code>keyRef</code> <p>A JSON string with an ID that references a <code>key</code> object. This field is REQUIRED.</p>"},{"location":"specification/#dataset-object","title":"dataSet Object","text":"<p>The <code>dataSet</code> object contains the data of a code list:</p> <code>rows</code> <p>Defines the data rows of the code list. It MUST be a JSON array of <code>row</code> objects. This field is REQUIRED.</p>"},{"location":"specification/#row-object","title":"row Object","text":"<p>The <code>row</code> object defines a data row in a code list:</p> <code>cells</code> <p>Defines the data cells of the data row. It MUST be a JSON array of <code>cell</code> objects. This field is REQUIRED.</p>"},{"location":"specification/#cell-object","title":"cell Object","text":"<p>The <code>cell</code> object defines the content of a data cell:</p> <code>columnRef</code> <p>A reference to a code list column. A JSON string with an ID that references a <code>column</code> object.</p> <code>value</code> <p>Defines the actual value of the data cell. Depending on the column definition, this can be a JSON null value, a JSON string, a JSON number, a JSON object, or a JSON array of <code>localizableString</code> objects. This field is REQUIRED.</p>"},{"location":"specification/#localizablestring-object","title":"localizableString Object","text":"<p>The <code>localizableString</code> object is a text string associated with a language code:</p> <code>language</code> <p>A JSON string with a language tag. This MUST be an IETF BCP 47 language tag. This field is REQUIRED.</p> <code>text</code> <p>The actual text. This field is REQUIRED.</p> <p>Example:</p> <pre><code>\"longName\": [\n  {\n    \"language\": \"en\",\n    \"text\": \"ISO 3166-2 Codes for Germany\"\n  },\n  {\n    \"language\": \"de\",\n    \"text\": \"ISO 3166-2 Codes f\u00fcr Deutschland\"\n  }\n]\n</code></pre>"},{"location":"specification/#extension-of-the-specification","title":"Extension of the Specification","text":"<p>The OpenCoLi specification can be extended with additional data at certain points.</p> <p>The properties of these extensions are implemented as free fields, which must always be prefixed with <code>x-</code> (e.g., <code>x-external-id</code>). The value can be a string, a number, a boolean value, null, an object, or an array.</p> <p>The extensions may or may not be supported by the available tools. Ideally, these tools can be extended to add the desired support (e.g., in Open Source projects).</p> <p>Example:</p> <pre><code>\"info\": {\n  \"shortName\": \"GermanFederalStateCodes\",\n  \"agency\": {\n    \"shortName\": \"ISO\",\n    \"longName\": \"International Organization for Standardization\",\n    \"x-contact-name\": \"ISO Central Secretariat\",\n    \"x-contact-address\": \"Chemin de Blandonnet 8, 1214 Geneva, Switzerland\",\n    \"x-contact-email\": \"central@iso.org\"\n  }\n}\n</code></pre>"},{"location":"de/","title":"Einf\u00fchrung","text":"<p>Open Code List Representation (OpenCoLi) ist ein standardisiertes JSON-Format zum generischen Repr\u00e4sentieren von Code-Listen bzw. Schl\u00fcsselverzeichnissen. </p> <p>Die wesentlichen Eigenschaften sind:</p> <ul> <li>Definition von Code-Listen und Code-Listensammlungen mittels JSON</li> <li>Unterst\u00fctzung von Versionierung</li> <li>Unterst\u00fctzung von Mehrsprachigkeit</li> <li>Unterst\u00fctzung von internen Verweisen </li> <li>Unterst\u00fctzung von Verweisen auf externe Code-Listen</li> <li>Unterst\u00fctzung von mehrspaltigen Schl\u00fcsseln und Verweisen</li> <li>OpenCoLi-Dokumente k\u00f6nnen gegen das OpenCoLi Document Schema validiert werden.</li> <li>Open Source</li> </ul>"},{"location":"de/#beispiele","title":"Beispiele","text":"<p>Die folgenden OpenCoLi-Beispiel-Dokumente stehen zur Verf\u00fcgung:</p> <ul> <li>ISO 3166-2 Codes f\u00fcr Deutschland</li> <li>Hauptst\u00e4dte der deutschen Bundesl\u00e4nder</li> </ul>"},{"location":"de/#aktueller-status","title":"Aktueller Status","text":"<p>OpenCoLi ist noch ganz frisch und hier in einer aller ersten Version ver\u00f6ffentlicht. \u00dcber Feedback jeglicher Art w\u00fcrden wir uns sehr freuen.</p>"},{"location":"de/change-log/","title":"\u00c4nderungslog","text":""},{"location":"de/change-log/#opencoli-spezifikation","title":"OpenCoLi-Spezifikation","text":""},{"location":"de/change-log/#012-_-09-august-2024","title":"0.1.2 _ 09. August 2024","text":"<ul> <li>Erste Ver\u00f6ffentlichung</li> </ul>"},{"location":"de/community/","title":"Community","text":"<p>OpenCoLi ist ein Open Source-Projekt. Die aktuelle Version ist ein erster Vorschlag.</p> <p>Wie freuen uns \u00fcber Feedback jeglicher Art, egal ob positiv oder negativ:</p> <ul> <li>Ein Frage oder Meldung im GitHub Issue Tracker erstellen.</li> <li>Eine Diskussion unter GitHub Discussions starten.</li> <li>Einen Pull-Request initiieren.</li> </ul>"},{"location":"de/specification/","title":"OpenCoLi-Spezifikation","text":""},{"location":"de/specification/#version-012","title":"Version 0.1.2","text":"<p>Die Schl\u00fcsselw\u00f6rter \"MUSS/M\u00dcSSEN\" (Englisch: \"MUST\"), \"ERFORDERLICH\" (Englisch: \"REQUIRED\"), \"SOLLTE\" (Englisch: \"SHOULD\") und \"KANN\" (Englisch: \"MAY\") in diesem Dokument sind so zu interpretieren, wie sie in ihrer englischen \u00dcbersetzung in RFC2119 und RFC8174 spezifiziert sind, und nur dann, wenn sie, wie hier, in Gro\u00dfbuchstaben geschrieben sind.</p> <p>Dieses Spezifikation ist lizenziert unter der Apache License, Version 2.0.</p>"},{"location":"de/specification/#einfuhrung","title":"Einf\u00fchrung","text":"<p>Das Open Code List Representation Format (OpenCoLi) definiert ein generisches Standard-Datenformat zur Repr\u00e4sentation von Code-Listen bzw. Schl\u00fcsselverzeichnissen. Basierend auf dem JSON-Standard kann dieses Format mit nahezu jeder Programmiersprache leicht erzeugt und gelesen werden. Mit Hilfe des OpenCoLi Document Schema k\u00f6nnen Dokumente im OpenCoLi-Format auf ihre syntaktische Korrektheit hin validiert werden.</p> <p>OpenCoLi kann zum Austausch von Code-Listen zwischen Diensten oder Anwendungen genutzt werden, als Repr\u00e4sentationsformat f\u00fcr ofizielle Code-Listen oder als Antwortformat f\u00fcr API-Anfragen (z.B. f\u00fcr RESTful Web-Services).</p>"},{"location":"de/specification/#was-sind-code-listen","title":"Was sind Code-Listen?","text":"<p>Code-Listen bzw. Schl\u00fcsselverzeichnisse sind strukturierte Sammlungen von Codes bzw. Schl\u00fcsseln, die zur Identifikation und Klassifikation von Daten verwendet werden. Diese Verzeichnisse sind essenziell in zahlreichen Bereichen wie Datenbanken, Verwaltungssystemen, wissenschaftlichen Forschungen und industriellen Anwendungen. Sie dienen dazu, Daten konsistent und effizient zu organisieren, zu speichern und abzurufen.</p> <p>Code-Listen spielen eine zentrale Rolle bei der Standardisierung und Harmonisierung von Daten. Durch die Verwendung standardisierter Codes k\u00f6nnen unterschiedliche Systeme und Organisationen Daten einheitlich interpretieren und austauschen. </p> <p>Beispiele f\u00fcr Code-Listen sind:</p> <ul> <li> <p>Internationale Codes f\u00fcr Staaten, Sprachen und W\u00e4hrungen der International Organization for Standardization (ISO).</p> </li> <li> <p>Nationale Gebietsschl\u00fcssel (z.B. Gemeindeschl\u00fcssel der Bundesrepublik Deutschland)</p> </li> <li> <p>Nationale und subnationale Schl\u00fcssel im \u00f6ffentlichen Bereich (z.B. Statistikschl\u00fcssel der Statistikbeh\u00f6rden)</p> </li> </ul> <p>Im Prinzip l\u00e4sst sich jede Datenauswahl auf eine Code-Liste abbilden, selbst ein banaler boolescher Wert kann durch die Codes Nein und Ja repr\u00e4sentiert werden. </p>"},{"location":"de/specification/#wie-sind-code-listen-aufgebaut","title":"Wie sind Code-Listen aufgebaut?","text":"<p>Die einfachste Form einer Code-Liste besteht aus zwei Spalten: Schl\u00fcssel und Beschreibung.</p> <p>Hier ein Beispiel f\u00fcr ein L\u00e4nderverzeichnis:</p> Schl\u00fcssel Beschreibung AT \u00d6sterreich CH Schweiz DE Deutschland <p>Code-Listen k\u00f6nnen potentiell bliebig viele Spalten enthalten. Hier ein Beispiel f\u00fcr ein L\u00e4nderverzeichnis mit drei Spalten:</p> Schl\u00fcssel Kurzname Langname AT \u00d6sterreich Republik \u00d6sterreich CH Schweiz Schweizerische Eidgenossenschaft DE Deutschland Bundesrepublik Deutschland <p>Code-Listen k\u00f6nnen aufeinander verweisen. Hier ein Beispiel f\u00fcr ein L\u00e4nderverzeichnis mit Verweis auf ein anderes Kontinenteverzeichnis:</p> Schl\u00fcssel Kurzname Langname Kontinent AT \u00d6sterreich Republik \u00d6sterreich EU CH Schweiz Schweizerische Eidgenossenschaft EU DE Deutschland Bundesrepublik Deutschland EU MA Marokko K\u00f6nigreich Marokko AF <p>Das passende Kontinenteverzeichnis k\u00f6nnte dann so aussehen:</p> Schl\u00fcssel Name AF Afrika AM Amerikas EU Europa OC Ozeanien <p>Auch k\u00f6nnen Code-Listen mehr als einen Schl\u00fcssel besitzen. Hier ein Beispiel f\u00fcr ein L\u00e4nderverzeichnis mit verschiedenen ISO3166-Codes:</p> Alpha2Code Alpha3Code NumericCode Name AT AUT 040 \u00d6sterreich CH CHE 756 Schweiz DE DEU 276 Deutschland <p>Gehen wir noch einen Schritt weiter mit diesem mehrsprachigen L\u00e4nderverzeichnis:</p> Schl\u00fcssel Sprache Name AT de \u00d6sterreich AT en Austria CH de Schweiz CH en Switzerland DE de Deutschland DE en Germany <p>Hier ist es die Kombination aus Schl\u00fcssel und Sprache (ebenfalls durch einen Sprachschl\u00fcssel repr\u00e4sentiert), welche Eindeutigkeit definiert. </p> <p>Der Aufbau von Code-Listen kann also einfach bis einigerma\u00dfen komplex sein. </p>"},{"location":"de/specification/#gibt-es-nicht-schon-standards-fur-code-listen","title":"Gibt es nicht schon Standards f\u00fcr Code-Listen?","text":"<p>Ja, gibt es: Die Organization for the Advancement of Structured Information Standards (OASIS) hat mit Code List Representation (genericode) einen XML-basierten Standard f\u00fcr Code-Listen definiert.</p> <p>The OASIS Code List Representation format, \u201cgenericode\u201d, is a single model and XML format (with a W3C XML Schema) that can encode a broad range of code list information. The XML format is designed to support interchange or distribution of machine-readable code list information between systems.  Note that genericode is not designed as a run-time format for accessing code list information, and is not optimized for such usage.  Rather, it is designed as an interchange format that can be transformed into formats suitable for run-time usage, or loaded into systems that perform run-time processing using code list information.</p> <p>Klingt gut, hat aber einen Haken. Es existiert keine JSON-Repr\u00e4sentation von \"genericode\". </p> <p>Recognizing the custom use of JSON in a tight binding between user-defined processes, the committee sees no purpose served by standardizing a JSON syntax for the genericode vocabulary.</p> <p>Das bedeutet, es gibt keine offizielle Unterst\u00fctzung f\u00fcr JSON als Datenformat und somit auch kein offizielles JSON-Schema.</p> <p>Wer also Code-Listen im XML-Format repr\u00e4sentieren m\u00f6chte, dem sei der OASIS-Standard ans Herz gelegt. Wer aber mit JSON arbeiten m\u00f6chte, der hat mit OpenCoLi eine passende Alternative parat. Nat\u00fcrlich ist OpenCoLi erheblich vom OASIS Code List Representation Format beeinflusst und versucht auch weitestgehend kompatibel zu sein.</p>"},{"location":"de/specification/#definitionen","title":"Definitionen","text":""},{"location":"de/specification/#opencoli-dokument","title":"OpenCoLi-Dokument","text":"<p>Ein OpenCoLi-Dokument ist eine in sich geschlossene Ressource, die entweder eine Code-Liste oder eine Code-Listensammlung definiert und beschreibt. Es M\u00dcSSEN mindestens die Felder <code>opencoli</code> sowie im gegenseitigen Ausschluss <code>codeList</code> oder <code>codeListSet</code> enthalten sein. Ein OpenCoLi-Dokument verwendet die OpenCoLi-Spezifikation und ist mit ihr konform.</p>"},{"location":"de/specification/#code-liste","title":"Code-Liste","text":"<p>Eine Code-Liste ist eine klassische relationale Tabelle mit Spalten und Datenzeilen, wobei mindestens eine Spalte als Schl\u00fcssel (Code) dienen sollte. OpenCoLi erlaubt es, generische Code-Listen zu definieren.</p>"},{"location":"de/specification/#code-listensammlung","title":"Code-Listensammlung","text":"<p>Eine Code-Listensammlung ist eine Liste von Verweisen auf externe Code-Listen. Mit einer Code-Listensammlung k\u00f6nnen vor allem unterschiedliche Versionen einer Code-Liste zusammengefasst werden.</p>"},{"location":"de/specification/#spezifikation","title":"Spezifikation","text":""},{"location":"de/specification/#versionierung","title":"Versionierung","text":"<p>Die OpenCoLi-Spezifikation wird nach dem Schema <code>major.minor.patch</code> versioniert. Der Major-Minor-Teil der Versionsnummer (z. B. <code>0.1</code>) MUSS den Funktionssatz der Spezifikation bezeichnen. Die Patch-Versionen betreffen Fehler in diesem Dokument oder stellen Klarstellungen zu diesem Dokument bereit, nicht zum Funktionsumfang. Werkzeuge, die OpenCoLi in der Version <code>0.1</code> unterst\u00fctzen, M\u00dcSSEN mit allen <code>0.1.*</code> Versionen von OpenCoLi kompatibel sein. Die Patch-Version SOLLTE von den Werkzeugen NICHT ber\u00fccksichtigt werden, so dass zum Beispiel kein Unterschied zwischen <code>0.1.0</code> und <code>0.1.1</code> gemacht wird.</p> <p>Ein OpenCoLi-Dokument enth\u00e4lt stets ein obligatorisches Feld <code>opencoli</code>, das die verwendete Version der OpenCoLi-Spezifikation angibt.</p>"},{"location":"de/specification/#format","title":"Format","text":"<p>Ein OpenCoLi-Dokument, das mit der OpenCoLi-Spezifikation konform ist, ist selbst ein JSON-Objekt, das im JSON-Format dargestellt werden kann.</p> <p>Bei allen Feldnamen in der Spezifikation wird zwischen Gro\u00df- und Kleinschreibung unterschieden. Das Schema sieht zwei Arten von Feldern vor: Fest definierte Felder, die einen deklarierten Namen haben, und freie Felder, deren Namen aber einem bestimmten Muster (Englisch: pattern) entsprechen M\u00dcSSEN. Zusatzfelder M\u00dcSSEN innerhalb des enthaltenen JSON-Objekts eindeutige Namen haben.</p>"},{"location":"de/specification/#json-schema","title":"JSON Schema","text":"<p>JSON Schema ist eine Spezifikation zur Definition von JSON-Datenstrukturen. Ein JSON-Schema wird selbst deklarativ durch JSON ausgedr\u00fcckt. Das OpenCoLi Document Schema ist ein JSON-Schema f\u00fcr OpenCoLi-Dokumente.</p>"},{"location":"de/specification/#mehrsprachigkeit","title":"Mehrsprachigkeit","text":"<p>OpenCoLi unterst\u00fctzt Mehrsprachigkeit, d.h. Text-Strings k\u00f6nnen optional mit einem oder mehreren IETF BCP 47-Sprachtags versehen werden. Hinter jedem Sprachtag kann dann die passende \u00dcbersetzung angegeben werden.  </p> <p>Beispiel:</p> <pre><code>\"description\": [\n  {\n    \"language\": \"en\",\n    \"text\": \"Currency codes of the International Standard ISO 4217\"\n  },\n  {\n    \"language\": \"de\",\n    \"text\": \"W\u00e4hrungscodes der internationalen Norm ISO 4217\"\n  }\n]\n</code></pre>"},{"location":"de/specification/#sprachtags","title":"Sprachtags","text":"<p>IETF BCP 47 (Best Current Practice 47) ist ein Dokument, das die Regeln und Verfahren zur Erstellung und Nutzung von Sprachkennzeichnungen definiert. Diese Kennzeichnungen werden verwendet, um die Sprache von Inhalten im Internet zu identifizieren. BCP 47 wird von der Internet Engineering Task Force (IETF) verwaltet und besteht aus zwei RFCs (Request for Comments): RFC 5646 und RFC 4647.</p> <p>Sprachtags sind notwendig, um die richtige Lokalisierung und Internationalisierung von Webinhalten und Software zu gew\u00e4hrleisten. Sie erm\u00f6glichen es Anwendungen und Diensten, den richtigen Sprachinhalt f\u00fcr Benutzer bereitzustellen und die korrekte Darstellung von sprachspezifischen Daten wie Datumsformaten, Zahlen und Textrichtung zu unterst\u00fctzen.</p> <p>Ein BCP 47-Sprachtag besteht aus einer Reihe von Untertags, die durch Bindestriche getrennt sind. Diese Untertags definieren verschiedene Aspekte der Sprache und ihrer Varianten. Die grundlegendsten Komponenten sind:</p> <ul> <li> <p>Prim\u00e4rsprachen-Subtag: Dies ist ein obligatorischer Subtag und besteht aus einem Zwei- oder Drei-Buchstaben-Code, der die Hauptsprache bezeichnet (z.B. <code>en</code> f\u00fcr Englisch, <code>de</code> f\u00fcr Deutsch).</p> </li> <li> <p>Region-Subtag: Ein optionaler Subtag, der ein Land oder eine Region spezifiziert (z.B. <code>US</code> f\u00fcr die Vereinigten Staaten in <code>en-US</code>).</p> </li> <li> <p>Skript-Subtag: Ein optionaler Subtag, der das Schriftsystem angibt (z.B. <code>Latn</code> f\u00fcr das lateinische Alphabet in <code>zh-Latn</code>).</p> </li> <li> <p>Variante-Subtag: Ein optionaler Subtag, der Sprachvarianten oder Dialekte beschreibt (z.B. <code>1901</code> f\u00fcr die traditionelle deutsche Rechtschreibung in <code>de-1901</code>).</p> </li> <li> <p>Extension-Subtag: Erweiterungen zur Angabe zus\u00e4tzlicher Informationen.</p> </li> <li> <p>Privatgebrauch-Subtag: Ein Bereich, der f\u00fcr die private Nutzung reserviert und nicht standardisiert ist.</p> </li> </ul>"},{"location":"de/specification/#datums-und-zeitangaben","title":"Datums- und Zeitangaben","text":"<p>Die Formatierung der Datums- und Zeitangaben in OpenCoLi sind, wie von JSON Schema vorgegeben, durch RFC 3339, Abschnitt 5.6 spezifiziert.</p> <p>Beispiele:</p> <ul> <li><code>date-time</code> : Datum und Zeit zusammen, z.B. <code>2024-11-13T20:20:39</code> oder <code>2024-11-13T20:20:39+00:00</code>.</li> <li><code>time</code> : Nur Uhrzeit, z.B. <code>20:20:39</code> oder <code>20:20:39+00:00</code>.</li> <li><code>date</code> : Nur Datum, z.B. <code>2024-11-13</code>.</li> </ul>"},{"location":"de/specification/#uris","title":"URIs","text":"<p>Wird ein Uniform Resource Identifier (URI) verlangt, muss je nach Kontext zwischen zwei JSON-String-Formaten unterscheiden werden:</p> <ul> <li> <p>Das Format <code>uri</code> erwartet, dass der JSON-String ein absoluter URI (Uniform Resource Identifier) ist. Ein absoluter URI enth\u00e4lt alle notwendigen Informationen, um die Ressource unabh\u00e4ngig von ihrem Kontext zu identifizieren. Das bedeutet, dass ein <code>uri</code></p> <ul> <li>mit einem Schemas (wie http, https, etc.) beginnt,</li> <li>einen Hostnamen oder eine IP-Adresse enthalten kann,</li> <li>und optional einen Pfad, eine Abfrage und ein Fragment enthalten kann.</li> </ul> </li> <li> <p>Das Format <code>uri-reference</code> ist flexibler und erlaubt sowohl absolute als auch relative URIs. <code>uri-reference</code> kann also eine vollst\u00e4ndige URI wie oben beschrieben sein, oder es kann ein relativer Verweis sein, der in einem bestimmten Kontext interpretiert werden muss. Ein relativer URI k\u00f6nnte beispielsweise nur einen Pfad oder sogar nur ein Fragment enthalten.</p> </li> </ul> <p>Beispiele:</p> <ul> <li><code>uri</code> : <ul> <li><code>https://example.com/path/to/resource?query=param#fragment</code></li> </ul> </li> <li><code>uri-reference</code> : <ul> <li><code>https://example.com/path/to/resource?query=param#fragment</code></li> <li><code>/path/to/resource</code></li> <li><code>#fragmen</code></li> </ul> </li> </ul>"},{"location":"de/specification/#opencoli-objekt","title":"OpenCoLi-Objekt","text":"<p>Dies ist das Wurzelobjekt eines OpenCoLi-Dokuments und enth\u00e4lt folgende Felder:</p> <code>opencoli</code> <p>Ein JSON-String mit der Versionsnummer der OpenCoLi-Spezifikation. Dieses Feld ist ERFORDERLICH.</p> <code>codeList</code> <p>Ein <code>codeList</code>-Objekt, das die Spaltendefinitionen und den Dateninhalt einer Code-Liste beinhaltet. </p> <code>codeListSet</code> <p>Ein <code>codeListSet</code>-Objekt, das eine Sammlung von Code-Listen definiert. </p> <p>Die Felder <code>codeList</code> und <code>codeListSet</code> schlie\u00dfen sich gegensietig aus. Eines von beiden Feldern ist ERFORDERLICH</p>"},{"location":"de/specification/#codelist-objekt","title":"codeList-Objekt","text":"<p>Das <code>codeList</code>-Objekt definiert eine komplette Code-Liste samt Daten:</p> <code>info</code> <p>Ein <code>codeListInfo</code>-Objekt mit Metadaten zur Code-Liste. Dieses Feld ist ERFORDERLICH.</p> <code>columnSet</code> <p>Ein <code>columnSet</code>-Objekt, das die Spalten und eindeutigen Schl\u00fcssel der Code-Liste definiert. Dieses Feld ist ERFORDERLICH.</p> <code>dataSet</code> <p>Ein <code>dataSet</code>-Objekt, das die Datenzeilen der Code-Liste enth\u00e4lt.</p>"},{"location":"de/specification/#codelistinfo-objekt","title":"codeListInfo-Objekt","text":"<p>Das <code>codeListInfo</code>-Objekt enth\u00e4lt Metadaten zur Code-Liste:</p> <code>shortName</code> <p>Ein JSON-String mit dem Kurznamen der Code-Liste.</p> <code>longName</code> <p>Der Langname der Code-Liste. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>description</code> <p>Eine ausf\u00fchrliche Beschreibung der Code-Liste. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>notes</code> <p>Zus\u00e4tzliche Bemerkungen zur Code-Liste. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>changeLog</code> <p>Erlaubt es, die \u00c4nderungen gegen\u00fcber vorherigen Versionen dieser Code-Liste zu dokumentieren. Es MUSS ein JSON-Array mit JSON-Strings sein.</p> <code>agency</code> <p>Ein <code>agency</code>-Objekt mit Informationen \u00fcber die Stelle, die f\u00fcr die Ver\u00f6ffentlichung und/oder Pflege der Codes zust\u00e4ndig ist.</p> <code>version</code> <p>Ein JSON-String mit der Version der Code-Liste.</p> <code>validFrom</code> <p>Ein JSON-String im Format <code>date-time</code>, der den Zeitpunkt definiert, ab dem diese Code-Liste g\u00fcltig ist.</p> <code>validTo</code> <p>Ein JSON-String im Format <code>date-time</code>, der den Zeitpunkt definiert, bis zu dem diese Code-Liste noch g\u00fcltig ist.</p> <code>canonicalUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert alle Versionen (zusammen) dieser Code-Liste eindeutig. </p> <code>canonicalVersionUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert eine bestimmte Version dieser Code-Liste. Dieses Feld ist ERFORDERLICH.</p> <code>locationUri</code> <p>Entweder ein JSON-String im Format <code>uri</code> oder ein JSON-Array mit JSON-String-Werten im Format <code>uri</code>. Diese URIs sind vorgeschlagene Abruforte f\u00fcr die referenzierte Code-Liste, im OpenCoLi-Format.</p> <code>publishedAt</code> <p>Ein JSON-String im Format <code>date-time</code> mit dem Zeitpunkt der Ver\u00f6ffentlichung dieser Code-Liste.</p> <code>publishedFrom</code> <p>Ein <code>publisher</code>-Objekt mit Informationen \u00fcber den Herausgeber dieser Code-Liste.</p> <code>language</code> <p>Ein JSON-String mit der Sprache dieser Code-Liste. Dies MUSS ein IETF BCP 47-Sprachtag sein.</p> <p>Dieses Objekt KANN erweitert werden.</p> <p>Beispiel:</p> <pre><code>\"info\": {\n  \"shortName\": \"GermanFederalStateCodes\",\n  \"longName\": \"ISO 3166-2 Codes for Germany\",\n  \"description\": \"ISO 3166-2 Codes for the federal states of Germany\",\n  \"agency\": {\n    \"shortName\": \"ISO\",\n    \"longName\": \"International Organization for Standardization\",\n    \"url\": \"https://www.iso.org/\"\n  },\n  \"version\": \"2024-07-12\",\n  \"canonicalUri\": \"urn:iso:std:iso:3166-2\",\n  \"canonicalVersionUri\": \"urn:iso:std:iso:3166-2:2024-07-12\",\n  \"locationUri\": \"https://github.com/openpotato/opencoli/tree/main/samples/germany.federal-state-codes-2024-07-12.json\",\n  \"publishedAt\": \"2024-07-12T10:00:00\",\n  \"publishedFrom\": {\n    \"shortName\": \"OpenCoLi\",\n    \"url\": \"https://openpotato.github.io/opencoli/\"\n  },\n  \"language\": \"en\"\n}\n</code></pre>"},{"location":"de/specification/#codelistset-objekt","title":"codeListSet-Objekt","text":"<p>Das <code>codeListSet</code>-Objekt definiert eine Sammlung von Code-Listen:</p> <code>info</code> <p>Ein <code>codeListSetInfo</code>-Objekt mit Metadaten zur Code-Listensammlung. Dieses Feld ist ERFORDERLICH.</p> <code>codeLists</code> <p>Eine Liste von Code-Listen. Es MUSS ein JSON-Array mit <code>codeListRef</code>-Objekten sein. Dieses Feld ist ERFORDERLICH.</p>"},{"location":"de/specification/#codelistsetinfo-objekt","title":"codeListSetInfo-Objekt","text":"<p>Das <code>codeListSetInfo</code>-Objekt enth\u00e4lt Metadaten zu einer Code-Listensammlung:</p> <code>shortName</code> <p>Ein JSON-String mit dem Kurznamen der Code-Listensammlung.</p> <code>longName</code> <p>Der Langname der Code-Listensammlung. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>description</code> <p>Eine kurze Beschreibung der Code-Listensammlung. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>summary</code> <p>Eine l\u00e4ngere Zusammenfassung zum Inhalt der Code-Listensammlung. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>language</code> <p>Ein JSON-String mit der Sprache dieser Code-Listensammlung. Dies MUSS ein IETF BCP 47-Sprachtag sein.</p> <p>Dieses Objekt KANN erweitert werden.</p> <p>Beispiel:</p> <pre><code>\"info\": {\n  \"shortName\": \"GermanFederalStateCodeListSet\",\n  \"longName\": \"ISO 3166-2 Code Lists for Germany\",\n  \"description\": \"All versions of the ISO 3166-2 Code Lists for the federal states of Germany\",\n  \"language\": \"en\"\n}\n</code></pre>"},{"location":"de/specification/#codelistref-objekt","title":"codeListRef-Objekt","text":"<p>Das <code>codeListRef</code>-Objekt definiert einen Verweis auf eine externe Code-Liste:</p> <code>canonicalUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert alle Versionen (zusammen) der referenzierten Code-Liste eindeutig. </p> <code>canonicalVersionUri</code> <p>Ein JSON-String im Format <code>uri</code>. Diese URI identifiziert eine bestimmte Version der referenzierten Code-Liste. Dieses Feld ist ERFORDERLICH.</p> <code>locationUri</code> <p>Entweder ein JSON-String im Format <code>uri</code> oder ein JSON-Array mit JSON-String-Werten im Format <code>uri</code>. Diese URIs sind vorgeschlagene Abruforte f\u00fcr die referenzierte Code-Liste, im OpenCoLi-Format.</p>"},{"location":"de/specification/#columnset-objekt","title":"columnSet-Objekt","text":"<p>Das <code>columnSet</code>-Objekt definiert Spalten und eindeutigen Schl\u00fcssel einer Code-Liste:</p> <code>columns</code> <p>Definiert die Spalten der Code-Liste. Es MUSS ein JSON-Array mit <code>column</code>-Objekten sein. Dieses Feld ist ERFORDERLICH.</p> <code>keys</code> <p>Definiert die eindeutigen Schl\u00fcssel der Code-Liste. Es MUSS ein JSON-Array mit <code>key</code>-Objekten sein.</p> <code>defaultKey</code> <p>Ein JSON-String mit einer ID, die auf ein <code>key</code>-Objekt verweist. Damit kann bei mehreren Schl\u00fcsseln der Standardschl\u00fcssel definiert werden, also jenen Schl\u00fcssel aus <code>keys</code>, der bevorzugt als Code-Quelle genutzt werden soll.</p> <code>references</code> <p>Definiert interne Referenzen sowie externe Referenzen zu anderen Code-Listen. Es MUSS ein JSON-Array mit <code>reference</code>-Objekten sein.</p>"},{"location":"de/specification/#column-objekt","title":"column-Objekt","text":"<p>Das <code>column</code>-Objekt definiert eine Spalte f\u00fcr einer Code-Liste:</p> <code>id</code> <p>Ein JSON-String mit der ID der Spalte. Dieses Feld ist ERFORDERLICH.</p> <code>name</code> <p>Der Name der Spalte. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>description</code> <p>Eine kurze Beschreibung der Spalte. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>type</code> <p>Definiert den Datentyp der Spalte. Dieses Feld ist ERFORDERLICH. Es MUSS ein JSON-String mit einem dieser Werte sein: + <code>string</code> + <code>enum</code> + <code>enum-set</code> + <code>integer</code> + <code>number</code> + <code>bool</code> + <code>time</code> + <code>date</code> + <code>date-time</code> + <code>object</code></p> <code>nullable</code> <p>Eine JSON-Boolean, der definiert, on diese Spalte auch JSON-NULLs enthalten darf.</p> <p>Abh\u00e4ngig vom Wert in <code>type</code> sind weitere Eigenschaften verf\u00fcgbar.</p>"},{"location":"de/specification/#string","title":"string","text":"<p>Repr\u00e4sentiert einen JSON-String. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minLength</code> : Eine JSON-Nummer im Format <code>integer</code> mit der minimalen zul\u00e4ssigen Anzahl an Zeichen</li> <li><code>maxLength</code> : Eine JSON-Nummer im Format <code>integer</code> mit der maximalen zul\u00e4ssigen Anzahl an Zeichen</li> <li><code>pattern</code> : Eine JSON-String mit einem regul\u00e4ren Ausdruck, der stets zu den Werten in dieser Spalte passen muss.</li> <li><code>language</code> : Ein JSON-String mit der Sprache f\u00fcr die Inhalte dieser Spalte. Dies MUSS ein IETF BCP 47-Sprachtag sein.</li> </ul>"},{"location":"de/specification/#enum","title":"enum","text":"<p>Einen JSON-String, der ein Aufz\u00e4hlung repr\u00e4sentiert. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>members</code> : Definiert die m\u00f6glichen Werte der Ausz\u00e4hlung. Es MUSS ein JSON-Array mit <code>enumMember</code>-Objekten sein. Dieses Feld ist ERFORDERLICH.</li> </ul>"},{"location":"de/specification/#enum-set","title":"enum-set","text":"<p>Einen JSON-String, der eine Aufz\u00e4hlungmenge repr\u00e4sentiert, formatiert als CSV-String. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>delimiterChar</code> : Ein JSON-String, der das CSV-Trennzeichen definiert.</li> <li><code>quoteChar</code> : Ein JSON-String, der das CSV-Begrenzungszeichen definiert.</li> <li><code>members</code> : Definiert die m\u00f6glichen Werte der Aufz\u00e4hlung. Es MUSS ein JSON-Array mit <code>enumMember</code>-Objekten sein. Dieses Feld ist ERFORDERLICH.</li> </ul>"},{"location":"de/specification/#integer","title":"integer","text":"<p>Repr\u00e4sentiert eine JSON-Nummer im Format <code>integer</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Eine JSON-Nummer im Format <code>integer</code> mit dem zul\u00e4ssigen Minimalwert</li> <li><code>maxValue</code> : Eine JSON-Nummer im Format <code>integer</code> mit dem zul\u00e4ssigen Minimalwert</li> </ul>"},{"location":"de/specification/#number","title":"number","text":"<p>Repr\u00e4sentiert eine JSON-Nummer im Format <code>number</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Eine JSON-Nummer im Format <code>number</code> mit dem zul\u00e4ssigen Minimalwert</li> <li><code>maxValue</code> : Eine JSON-Nummer im Format <code>number</code> mit dem zul\u00e4ssigen Minimalwert</li> </ul>"},{"location":"de/specification/#date","title":"date","text":"<p>Repr\u00e4sentiert ein JSON-String im Format <code>date</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Ein JSON-String im Format <code>date</code> mit dem zul\u00e4ssigen Minimalwert</li> <li><code>maxValue</code> : Ein JSON-String im Format <code>date</code> mit dem zul\u00e4ssigen Minimalwert</li> </ul>"},{"location":"de/specification/#date-time","title":"date-time","text":"<p>Repr\u00e4sentiert ein JSON-String im Format <code>date-time</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Ein JSON-String im Format <code>date-time</code> mit dem zul\u00e4ssigen Minimalwert</li> <li><code>maxValue</code> : Ein JSON-String im Format <code>date-time</code> mit dem zul\u00e4ssigen Minimalwert</li> </ul>"},{"location":"de/specification/#time","title":"time","text":"<p>Repr\u00e4sentiert ein JSON-String im Format <code>time</code>. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>minValue</code> : Ein JSON-String im Format <code>time</code> mit dem zul\u00e4ssigen Minimalwert</li> <li><code>maxValue</code> : Ein JSON-String im Format <code>time</code> mit dem zul\u00e4ssigen Minimalwert</li> </ul>"},{"location":"de/specification/#object","title":"object","text":"<p>Repr\u00e4sentiert ein JSON-Objekt. Die folgenden zus\u00e4tzlichen Schema-Eigenschaften sind verf\u00fcgbar:</p> <ul> <li><code>schemaUri</code> : Ein JSON-String im Format <code>uri</code>. Diese URI ist der Abrufort des JSON-Schemas f\u00fcr diese Spalte.</li> </ul>"},{"location":"de/specification/#enummember-objekt","title":"enumMember-Objekt","text":"<p>Das <code>enumMember</code>-Objekt definiert einen Wert in einer Aufz\u00e4hlung:</p> <code>value</code> <p>Ein JSON-String mit dem Aufz\u00e4hlungswert. Dieses Feld ist ERFORDERLICH.</p> <code>description</code> <p>Die Beschreibung des Aufz\u00e4hlungswertes. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p>"},{"location":"de/specification/#key-objekt","title":"key-Objekt","text":"<p>Das <code>key</code>-Objekt definiert einen eindeutigen Schl\u00fcssel f\u00fcr die Code-Liste:</p> <code>id</code> <p>Ein JSON-String mit der eindeutigen ID des Schl\u00fcssels. Dieses Feld ist ERFORDERLICH.</p> <code>name</code> <p>Der Name des Schl\u00fcssels. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>description</code> <p>Eine kurze Beschreibung des Schl\u00fcssels. Dies ist entweder ein normaler JSON-String oder ein JSON-Array mit <code>localizableString</code>-Objekten.</p> <code>columnRefs</code> <p>Ein JSON-String-Array mit IDs, die jeweils auf ein <code>column</code>-Objekt verweisen. Dieses Feld ist ERFORDERLICH.</p>"},{"location":"de/specification/#reference-objekt","title":"reference-Objekt","text":"<p>Das <code>reference</code>-Objekt definiert eine Referenz zur eigenen oder zu einer externen Code-Liste:</p> <code>codeListRef</code> <p>Ein <code>codeListRef</code>-Objekt, das auf eine externe Code-Liste verweist. Ist <code>codeListRef</code> definiert, verweist <code>keyRef</code> auf ein <code>key</code>-Objekt aus der referenzierten Code-Liste, andernfalls auf ein <code>key</code>-Objekt dieser Code-Liste.</p> <code>keyRef</code> <p>Ein JSON-String mit einer ID, die auf ein <code>key</code>-Objekt verweist. Dieses Feld ist ERFORDERLICH.</p>"},{"location":"de/specification/#dataset-objekt","title":"dataSet-Objekt","text":"<p>Das <code>dataSet</code>-Objekt enth\u00e4lt die Daten einer Code-Liste:</p> <code>rows</code> <p>Definiert die Datenzeilen der Code-Liste. Es MUSS ein JSON-Array mit <code>row</code>-Objekten sein. Dieses Feld ist ERFORDERLICH.</p>"},{"location":"de/specification/#row-objekt","title":"row-Objekt","text":"<p>Das <code>row</code>-Objekt definiert eine Datenzeile in einer Code-Liste:</p> <code>cells</code> <p>Definiert die Datenzellen der Datenzeile. Es MUSS ein JSON-Array mit <code>cell</code>-Objekten sein. Dieses Feld ist ERFORDERLICH.</p>"},{"location":"de/specification/#cell-objekt","title":"cell-Objekt","text":"<p>Das <code>cell</code>-Objekt definiert den Inhalt einer Datenzelle:</p> <code>columnRef</code> <p>Ein Verweis auf eine Code-Listenspalte. Ein JSON-String mit einer ID, die auf ein <code>column</code>-Objekt verweist.</p> <code>value</code> <p>Definiert den eigentlichen Wert der Datenzelle. Je nach Spaltendefinition kann dies ein JSON-Null-Wert, ein JSON-String, ein JSON-Numeric, ein JSON-Objekt oder ein JSON-Array mit <code>localizableString</code>-Objekten sein. Dieses Feld ist ERFORDERLICH.</p>"},{"location":"de/specification/#localizablestring-objekt","title":"localizableString-Objekt","text":"<p>Das <code>localizableString</code>-Objekt ist Text-String, der mit einem Sprach-Code verbunden ist:</p> <code>language</code> <p>Ein JSON-String mit einem Sprachtag. Dies MUSS ein IETF BCP 47-Sprachtag sein. Dieses Feld ist ERFORDERLICH.</p> <code>text</code> <p>Der eigentliche Text. Dieses Feld ist ERFORDERLICH.</p> <p>Beispiel:</p> <pre><code>\"longName\": [\n  {\n    \"language\": \"de\",\n    \"text\": \"ISO 3166-2 Codes f\u00fcr Deutschland\"\n  },\n  {\n    \"language\": \"en\",\n    \"text\": \"ISO 3166-2 Codes for Germany\"\n  }\n]\n</code></pre>"},{"location":"de/specification/#erweiterung-der-spezifikation","title":"Erweiterung der Spezifikation","text":"<p>Die OpenCoLi-Spezifikation kann an bestimmten Stellen um zus\u00e4tzliche Daten erweitert werden.</p> <p>Die Eigenschaften der Erweiterungen sind als freie Felder implementiert, denen immer ein <code>x-</code> vorangestellt werden MUSS (z.B. <code>x-external-id</code>). Der Wert kann eine Zeichenfolge, eine Zahl, ein boolescher Wert, Null, ein Objekt oder ein Array sein.</p> <p>Die Erweiterungen k\u00f6nnen von den verf\u00fcgbaren Werkzeugen unterst\u00fctzt werden oder auch nicht. Idealerweise k\u00f6nnen diese Werkzeuge erweitert werden, um die gew\u00fcnschte Unterst\u00fctzung hinzuzuf\u00fcgen (z.B. bei Open Source-Projekten).</p> <p>Beispiel:</p> <pre><code>\"info\": {\n  \"shortName\": \"GermanFederalStateCodes\",\n  \"agency\": {\n    \"shortName\": \"ISO\",\n    \"longName\": \"International Organization for Standardization\",\n    \"x-contact-name\": \"ISO Central Secretariat\",\n    \"x-contact-address\": \"Chemin de Blandonnet 8, 1214 Geneva, Switzerland\",\n    \"x-contact-email\": \"central@iso.org \"\n  }\n}\n</code></pre>"}]}